<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1344268675501" ID="ID_1812358581" LINK="pythonzzz.mm" MODIFIED="1348774434050" TEXT="Less">
<node CREATED="1344268890355" FOLDED="true" MODIFIED="1344272227322" POSITION="right" TEXT="Variables">
<node CREATED="1344268897284" MODIFIED="1344272194647" TEXT="@color: #4D926F;&#xa;&#xa;#header {&#xa;  color: @color;&#xa;}&#xa;h2 {&#xa;  color: @color;&#xa;}&#xa;&#xa;/* Compiled CSS */&#xa;&#xa;#header {&#xa;  color: #4D926F;&#xa;}&#xa;h2 {&#xa;  color: #4D926F;&#xa;}"/>
<node CREATED="1344272151966" MODIFIED="1344272159933" TEXT="@nice-blue: #5B83AD;&#xa;@light-blue: @nice-blue + #111;&#xa;&#xa;#header { color: @light-blue; }&#xa;&#xa;Outputs:&#xa;&#xa;#header { color: #6c94be; }"/>
<node CREATED="1344272172496" MODIFIED="1344272175862" TEXT="It is also possible to define variables with a variable name:&#xa;&#xa;@fnord: &quot;I am fnord.&quot;;&#xa;@var: &apos;fnord&apos;;&#xa;content: @@var;&#xa;Which compiles to:&#xa;&#xa;content: &quot;I am fnord.&quot;;"/>
</node>
<node CREATED="1344268693388" FOLDED="true" MODIFIED="1344271950344" POSITION="right" TEXT="Mixins">
<node CREATED="1344268815568" MODIFIED="1344271812435" TEXT="Mixins allow you to embed all the properties of a class into another class by simply including the class name as one of its properties. It&#x2019;s just like variables, but for whole classes."/>
<node CREATED="1344271842387" MODIFIED="1344271851175" TEXT="In LESS, it is possible to include a bunch of properties from one ruleset into another ruleset. So say we have the following class:&#xa;&#xa;.bordered {&#xa;  border-top: dotted 1px black;&#xa;  border-bottom: solid 2px black;&#xa;}&#xa;&#xa;And we want to use these properties inside other rulesets. Well, we just have to drop in the name of the class in any ruleset we want to include its properties, like so:&#xa;&#xa;#menu a {&#xa;  color: #111;&#xa;  .bordered;&#xa;}&#xa;.post a {&#xa;  color: red;&#xa;  .bordered;&#xa;}"/>
<node CREATED="1344271868860" MODIFIED="1344271879178" TEXT="The properties of the .bordered class will now appear in both #menu a and .post a:&#xa;&#xa;#menu a {&#xa;  color: #111;&#xa;  border-top: dotted 1px black;&#xa;  border-bottom: solid 2px black;&#xa;}&#xa;.post a {&#xa;  color: red;&#xa;  border-top: dotted 1px black;&#xa;  border-bottom: solid 2px black;&#xa;}&#xa;&#xa;Any CSS class or id ruleset can be mixed-in that way."/>
</node>
<node CREATED="1344271773272" FOLDED="true" MODIFIED="1344272136128" POSITION="right" TEXT="Mixins w/ parameters">
<node CREATED="1344271815521" MODIFIED="1344271815897" TEXT="Mixins can also behave like functions, and take arguments, as seen in the example bellow."/>
<node CREATED="1344268831497" MODIFIED="1344268872365" TEXT=".rounded-corners (@radius: 5px) {    // The (@radius: 5px) is an argument&#xa;  border-radius: @radius;&#xa;  -webkit-border-radius: @radius;&#xa;  -moz-border-radius: @radius;&#xa;}&#xa;&#xa;#header {&#xa;  .rounded-corners;&#xa;}&#xa;#footer {&#xa;  .rounded-corners(10px);&#xa;}&#xa;&#xa;/* Compiled CSS */&#xa;&#xa;#header {&#xa;  border-radius: 5px;&#xa;  -webkit-border-radius: 5px;&#xa;  -moz-border-radius: 5px;&#xa;}&#xa;#footer {&#xa;  border-radius: 10px;&#xa;  -webkit-border-radius: 10px;&#xa;  -moz-border-radius: 10px;&#xa;}"/>
<node CREATED="1344271933726" FOLDED="true" MODIFIED="1344271943535" TEXT="With a default value">
<node CREATED="1344271918206" MODIFIED="1344271926020" TEXT="Parametric mixins can also have default values for their parameters:&#xa;&#xa;.border-radius (@radius: 5px) {&#xa;  border-radius: @radius;&#xa;  -moz-border-radius: @radius;&#xa;  -webkit-border-radius: @radius;&#xa;}&#xa;&#xa;We can invoke it like this now:&#xa;&#xa;#header {&#xa;  .border-radius;&#xa;}&#xa;&#xa;And it will include a 5px border-radius."/>
</node>
<node CREATED="1344272019023" FOLDED="true" MODIFIED="1344272045787" TEXT="Parametric mixins w/o parameters hide the rules from the CSS output">
<node CREATED="1344272038762" MODIFIED="1344272042041" TEXT="You can also use parametric mixins which don&#x2019;t take parameters. This is useful if you want to hide the ruleset from the CSS output, but want to include its properties in other rulesets:&#xa;&#xa;.wrap () {&#xa;  text-wrap: wrap;&#xa;  white-space: pre-wrap;&#xa;  white-space: -moz-pre-wrap;&#xa;  word-wrap: break-word;&#xa;}&#xa;&#xa;pre { .wrap }&#xa;Which would output:&#xa;&#xa;pre {&#xa;  text-wrap: wrap;&#xa;  white-space: pre-wrap;&#xa;  white-space: -moz-pre-wrap;&#xa;  word-wrap: break-word;&#xa;}"/>
</node>
<node CREATED="1344272069995" FOLDED="true" MODIFIED="1344272098725" TEXT="The @arguments variable">
<node CREATED="1344272081228" MODIFIED="1344272094816" TEXT="@arguments has a special meaning inside mixins, it contains all the arguments passed, when the mixin was called. This is useful if you don&#x2019;t want to deal with individual parameters:&#xa;&#xa;.box-shadow (@x: 0, @y: 0, @blur: 1px, @color: #000) {&#xa;  box-shadow: @arguments;&#xa;  -moz-box-shadow: @arguments;&#xa;  -webkit-box-shadow: @arguments;&#xa;}&#xa;&#xa;.box-shadow(2px, 5px);&#xa;&#xa;Which results in:&#xa;&#xa;  box-shadow: 2px 5px 1px #000;&#xa;  -moz-box-shadow: 2px 5px 1px #000;&#xa;  -webkit-box-shadow: 2px 5px 1px #000;"/>
</node>
</node>
<node CREATED="1344276653255" FOLDED="true" MODIFIED="1344276740927" POSITION="right" TEXT="Nesting">
<node CREATED="1344276666743" MODIFIED="1344276676685" TEXT="LESS gives you the ability to use nesting instead of, or in combination with cascading. Lets say we have the following CSS:&#xa;&#xa;#header { color: black; }&#xa;#header .navigation {&#xa;  font-size: 12px;&#xa;}&#xa;#header .logo {&#xa;  width: 300px;&#xa;}&#xa;#header .logo:hover {&#xa;  text-decoration: none;&#xa;}&#xa;&#xa;In LESS, we can also write it this way:&#xa;&#xa;#header {&#xa;  color: black;&#xa;&#xa;  .navigation {&#xa;    font-size: 12px;&#xa;  }&#xa;  .logo {&#xa;    width: 300px;&#xa;    &amp;:hover { text-decoration: none }&#xa;  }&#xa;}&#xa;&#xa;Or this way:&#xa;&#xa;#header        { color: black;&#xa;  .navigation  { font-size: 12px }&#xa;  .logo        { width: 300px;&#xa;    &amp;:hover    { text-decoration: none }&#xa;  }&#xa;}&#xa;&#xa;The resulting code is more concise, and mimics the structure of your DOM tree."/>
<node CREATED="1344276693962" MODIFIED="1344276694597" TEXT="Notice the &amp; combinator&#x2014;it&#x2019;s used when you want a nested selector to be concatenated to its parent selector, instead of acting as a descendant. This is especially important for pseudo-classes like :hover and :focus."/>
</node>
<node CREATED="1344276776130" FOLDED="true" MODIFIED="1344277234154" POSITION="right" TEXT="Operations">
<node CREATED="1344276792259" MODIFIED="1344276798093" TEXT="Any number, color or variable can be operated on. Here are a couple of examples:&#xa;&#xa;@base: 5%;&#xa;@filler: @base * 2;&#xa;@other: @base + @filler;&#xa;&#xa;color: #888 / 4;&#xa;background-color: @base-color + #111;&#xa;height: 100% / 2 + @filler;&#xa;&#xa;The output is pretty much what you expect&#x2014;LESS understands the difference between colors and units."/>
<node CREATED="1344277203703" MODIFIED="1344277210511" TEXT="If a unit is used in an operation, like in:&#xa;&#xa;@var: 1px + 5;&#xa;LESS will use that unit for the final output&#x2014;6px in this case."/>
<node CREATED="1344277221480" MODIFIED="1344277233362" TEXT="Brackets are also authorized in operations:&#xa;&#xa;width: (@var + 5) * 2;&#xa;And are required in compound values:&#xa;&#xa;border: (@width * 2) solid black;"/>
</node>
<node CREATED="1344284378570" FOLDED="true" MODIFIED="1344284495168" POSITION="right" TEXT="Color functions">
<node CREATED="1344284393739" MODIFIED="1344284397200" TEXT="LESS provides a variety of functions which transform colors. Colors are first converted to the HSL color-space, and then manipulated at the channel level:&#xa;&#xa;lighten(@color, 10%);     // return a color which is 10% *lighter* than @color&#xa;darken(@color, 10%);      // return a color which is 10% *darker* than @color&#xa;&#xa;saturate(@color, 10%);    // return a color 10% *more* saturated than @color&#xa;desaturate(@color, 10%);  // return a color 10% *less* saturated than @color&#xa;&#xa;fadein(@color, 10%);      // return a color 10% *less* transparent than @color&#xa;fadeout(@color, 10%);     // return a color 10% *more* transparent than @color&#xa;fade(@color, 50%);        // return @color with 50% transparency&#xa;&#xa;spin(@color, 10);         // return a color with a 10 degree larger in hue than @color&#xa;spin(@color, -10);        // return a color with a 10 degree smaller hue than @color&#xa;&#xa;mix(@color1, @color2);    // return a mix of @color1 and @color2"/>
<node CREATED="1344284482950" FOLDED="true" MODIFIED="1344284488295" TEXT="Using color functions">
<node CREATED="1344284403404" MODIFIED="1344284407295" TEXT="Using them is pretty straightforward:&#xa;&#xa;@base: #f04615;&#xa;&#xa;.class {&#xa;  color: saturate(@base, 5%);&#xa;  background-color: lighten(spin(@base, 8), 25%);&#xa;}"/>
</node>
<node CREATED="1344284488974" FOLDED="true" MODIFIED="1344284493695" TEXT="Extract color information">
<node CREATED="1344284474911" MODIFIED="1344284477814" TEXT="You can also extract color information:&#xa;&#xa;hue(@color);        // returns the `hue` channel of @color&#xa;saturation(@color); // returns the `saturation` channel of @color&#xa;lightness(@color);  // returns the &apos;lightness&apos; channel of @color&#xa;alpha(@color);      // returns the &apos;alpha&apos; channel of @color"/>
</node>
</node>
<node CREATED="1344284525144" FOLDED="true" MODIFIED="1344284549488" POSITION="right" TEXT="Math functions">
<node CREATED="1344284537416" MODIFIED="1344284548539" TEXT="LESS provides a couple of handy math functions you can use on number values:&#xa;&#xa;round(1.67); // returns `2`&#xa;ceil(2.4);   // returns `3`&#xa;floor(2.6);  // returns `2`&#xa;percentage(0.5); // returns `50%`"/>
</node>
<node CREATED="1344284637148" FOLDED="true" MODIFIED="1344284656621" POSITION="right" TEXT="Namespaces">
<node CREATED="1344284644076" MODIFIED="1344284647873" TEXT="Sometimes, you may want to group your variables or mixins, for organizational purposes, or just to offer some encapsulation. You can do this pretty intuitively in LESS&#x2014;say you want to bundle some mixins and variables under #bundle, for later re-use, or for distributing:&#xa;&#xa;#bundle {&#xa;  .button () {&#xa;    display: block;&#xa;    border: 1px solid black;&#xa;    background-color: grey;&#xa;    &amp;:hover { background-color: white }&#xa;  }&#xa;  .tab { ... }&#xa;  .citation { ... }&#xa;}"/>
<node CREATED="1344284653909" MODIFIED="1344284655889" TEXT="Now if we want to mixin the .button class in our #header a, we can do:&#xa;&#xa;#header a {&#xa;  color: orange;&#xa;  #bundle &gt; .button;&#xa;}"/>
</node>
<node CREATED="1344284678046" FOLDED="true" MODIFIED="1344284688815" POSITION="right" TEXT="Scope">
<node CREATED="1344284684901" MODIFIED="1344284687588" TEXT="Scope in LESS is very similar to that of programming languages. Variables and mixins are first looked up locally, and if they aren&#x2019;t found, the compiler will look in the parent scope, and so on.&#xa;&#xa;@var: red;&#xa;&#xa;#page {&#xa;  @var: white;&#xa;  #header {&#xa;    color: @var; // white&#xa;  }&#xa;}&#xa;&#xa;#footer {&#xa;  color: @var; // red&#xa;}"/>
</node>
<node CREATED="1344284695687" FOLDED="true" MODIFIED="1344284721272" POSITION="right" TEXT="Comments">
<node CREATED="1344284710927" MODIFIED="1344284719766" TEXT="CSS-style comments are preserved by LESS:&#xa;&#xa;/* Hello, I&apos;m a CSS-style comment */&#xa;.class { color: black }&#xa;&#xa;Single-line comments are also valid in LESS, but they are &#x2018;silent&#x2019;, they don&#x2019;t show up in the compiled CSS output:&#xa;&#xa;// Hi, I&apos;m a silent comment, I won&apos;t show up in your CSS:&#xa;&#xa;.class { color: white }"/>
</node>
<node CREATED="1344284738440" FOLDED="true" MODIFIED="1344284764866" POSITION="right" TEXT="Importing">
<node CREATED="1344284757032" MODIFIED="1344284764163" TEXT="You can import .less files, and all the variables and mixins in them will be made available to the main file. The .less extension is optional, so both of these are valid:&#xa;&#xa;@import &quot;lib.less&quot;;&#xa;@import &quot;lib&quot;;&#xa;&#xa;If you want to import a CSS file, and don&#x2019;t want LESS to process it, just use the .css extension:&#xa;&#xa;@import &quot;lib.css&quot;;&#xa;&#xa;The directive will just be left as is, and end up in the CSS output."/>
</node>
<node CREATED="1344284791395" FOLDED="true" MODIFIED="1344284847573" POSITION="right" TEXT="String interpolation">
<node CREATED="1344284799211" MODIFIED="1344284802535" TEXT="Variables can be embeded inside strings in a similar way to ruby or PHP, with the @{name} construct:&#xa;&#xa;@base-url: &quot;http://assets.fnord.com&quot;;&#xa;background-image: url(&quot;@{base-url}/images/bg.png&quot;);"/>
</node>
<node CREATED="1344284848294" FOLDED="true" MODIFIED="1344284857294" POSITION="right" TEXT="Escaping">
<node CREATED="1344284849757" MODIFIED="1344284855919" TEXT="Sometimes you might need to output a CSS value which is either not valid CSS syntax, or uses proprietary syntax which LESS doesn&#x2019;t recognize.&#xa;&#xa;To output such value, we place it inside a string prefixed with ~, for example:&#xa;&#xa;.class {&#xa;  filter: ~&quot;ms:alwaysHasItsOwnSyntax.For.Stuff()&quot;;&#xa;}&#xa;&#xa;This is called an &#x201c;escaped value&#x201d;, which will result in:&#xa;&#xa;.class {&#xa;  filter: ms:alwaysHasItsOwnSyntax.For.Stuff();&#xa;}"/>
</node>
<node CREATED="1344284964313" FOLDED="true" MODIFIED="1344285110848" POSITION="right" TEXT="JavaScript evaluation">
<node CREATED="1344284975218" MODIFIED="1344284980280" TEXT="JavaScript expressions can be evaluated as values inside .less files. This is done by wrapping the expression with back-ticks:&#xa;&#xa;@var: `&quot;hello&quot;.toUpperCase() + &apos;!&apos;`;&#xa;&#xa;Becomes:&#xa;&#xa;@var: &quot;HELLO!&quot;;"/>
<node CREATED="1344285008480" MODIFIED="1344285013621" TEXT="Note that you may also use interpolation and escaping as with strings:&#xa;&#xa;@str: &quot;hello&quot;;&#xa;@var: ~`&quot;@{str}&quot;.toUpperCase() + &apos;!&apos;`;&#xa;&#xa;Becomes:&#xa;&#xa;@var: HELLO!;"/>
<node CREATED="1344285082079" MODIFIED="1344285084726" TEXT="It is also possible to access the JavaScript environment:&#xa;&#xa;@height: `document.body.clientHeight`;"/>
<node CREATED="1344285105976" MODIFIED="1344285109217" TEXT="If you want to parse a JavaScript string as a hex color, you may use the color function:&#xa;&#xa;@color: color(`window.colors.baseColor`);&#xa;@darkcolor: darken(@color, 10%);"/>
</node>
</node>
</map>
